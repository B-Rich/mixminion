Hacking Mixminion

Requirements:
	Python 2.0-2.2  (see PORTING NOTES below)
	OpenSSL 0.9.7 (you'll need to download a snapshot. Also see PORTING)
	Working /dev/urandom (see PORTING NOTES below)

Setting up:
	Get python 2.2.  There are RPMs around.
	Get the source.
	Unpack openssl 0.9.7 into minion/contrib/openssl.
	cd minion/contrib/openssl; ./config; make
	
Things to try:
	make
	make test
	make time

Things to hack:
	See the TODO list.  It would be really nice if somebody could
	hack up as much of MMTP as possible in C.

DESIGN PRINCIPALS:
    - It's not done till it's documented.
    - It's not done till it's tested.
    - Don't build general-purpose functionality.  Only build the
      operations you need.
    - "Premature optimization is the route of all evil." -Knuth
      Resist the temptation to optimize until it becomes a necessity.
      
    - Here's the conceptual layout. XXXX EXPLAIN MORE

       -------------
       I User code I
       -------------
             I
             V 
             -----------------------------------------
             I            MM library code            I
             -----------------------------------------
               I             I                 ^
               V             I                 I
       ------------------    I                 I
     ..| Network client |    V                 I
    .  ------------------<==---------       ----------
 net                        | Queue |<=====>| Engine |
    .  ------------------==>---------       ----------
     ..| Network server |
       ------------------

CODING STYLE:
    - See PEP-0008.  I believe in most of it.
    - Also see PEP-0257 for documentation; we're not there yet, but it's
      happening.
    - The magic string "XXXX" indicates a defect in the code. "FFFF" indicates
      a missing feature, and "????" indicates an untested or iffy block.

PORTABILITY NOTES:
    - I've already backported to 2.0.  (I refuse to backport to 1.5 or
      1.6.)
    - Right now, we're dependant on OpenSSL. OpenSSL's license has an
      old-style BSD license that isn't compatible with the GPL.  We
      have two other options, it seems:
         - libnss: this is a dual-license GPL/MPL library from
           Mozilla.  Sadly, we can't use it now, because it doesn't
           yet support server-side DHE.  Bugzilla says that
           server-side DHE is targetted for 3.5.  Perhaps then we can
           port, but I wouldn't hold my breath.
         - gnutls/libgcrypt: These is the GNU offerings; the relevant 
           portions of each are licensed under the LGPL.  They don't
           support OAEP, but that's easy enough to re-do in Python.

      So for now, it's OpenSSL.  I'll accept any patches that make us 
      run under gnutls/libgcrypt as well, but I think in the long term
      we should migrate to libnss entirely.

PORTING TO NON-LINUX PLATFORMS:
    - If you need to run on a system without /dev/urandom, you'll need
      to write an acceptable fallback for mixminion.Crypto.trng() to
      use.  
    - We assume the existence of a /usr/bin/shred to securely delete
      files.  This should be made configurable, but isn't yet.

CAVEATS:
    - If I haven't got a test for it in tests.py, assume it doesn't work.
    - The code isn't threadsafe.  It will become so only when it must.

--Nick
