Hacking Mixminion

Requirements:
	Python 2.0-2.2  (see PORTING NOTES below)

	OpenSSL 0.9.7 (You'll need to download a beta. As of 1 December 2002,
           that's http//www.openssl.org/source/openssl-0.9.7-beta4.tar.gz)

	A working /dev/urandom (see PORTING NOTES below)

Setting up:
	1) Get python 2.2.  You can download RPMS from www.python.org.
	2) Get the mixminion source.
	3) EITHER Unpack openssl 0.9.7 into minion/contrib/openssl
	          cd minion/contrib/openssl; ./config; make
           OR make download-openssl; make build-openssl

Things to try:
	make
	make test
	make time

Things to hack:
	See the TODO list.

DESIGN PRINCIPALS:
    - It's not done till it's documented.
    - It's not done till it's tested.
    - Don't build general-purpose functionality.  Only build the
      operations you need.
    - "Premature optimization is the route of all evil." -Knuth
      Resist the temptation to optimize until it becomes a necessity.
      
    - Here's the conceptual layout. XXXX EXPLAIN MORE

       -------------
       I User code I
       -------------
             I
             V 
             -----------------------------------------
             I            MM library code            I
             -----------------------------------------
               I             I                 ^
               V             I                 I
       ------------------    I                 I
     ..| Network client |    V                 I
    .  ------------------<==---------       ----------
 net                        | Queue |<=====>| Engine |
    .  ------------------==>---------       ----------
     ..| Network server |
       ------------------

CODING STYLE:
    - See PEP-0008: "Style Guide For Python Code".  I believe in most of it.
      (http://www.python.org/peps/pep-0008.html)
    - Also see PEP-0257 for documentation; we're not there yet, but it's
      happening. (http://www.python.org/peps/pep-0257.html)
    - The magic string "XXXX" indicates a defect in the code. "FFFF" indicates
      a missing feature, and "????" indicates an untested or iffy block.

PORTABILITY NOTES:
    - I've already backported to Python 2.0.  (I refuse to backport to 1.5 or
      1.6.)
    - Right now, we're dependant on OpenSSL. OpenSSL's license has an
      old-style BSD license that isn't compatible with the GPL.  We
      have two other options, it seems:
         - libnss: this is a dual-license GPL/MPL library from
           Mozilla.  Sadly, we can't use it now, because it doesn't
           yet support server-side DHE.  Bugzilla says that
           server-side DHE is targetted for 3.5.  Perhaps then we can
           port, but I wouldn't hold my breath.
         - gnutls/libgcrypt: These are the GNU offerings; the relevant
           portions of each are licensed under the LGPL.  They don't
           support OAEP, but we've already got an implementation of that
           in Python.

      So for now, it's OpenSSL.  I'll accept any patches that make us 
      run under gnutls/libgcrypt as well, but I think in the long term
      we should migrate to libnss entirely.

PORTING TO NON-LINUX PLATFORMS:
    - If you need to run on a system without an acceptable /dev/*random, 
      you'll need to write an acceptable fallback for mixminion.Crypto.trng() 
      to use.  
    - We assume the existence of a /usr/bin/shred to securely delete
      files.  This is now configurable, but I'd like to know a few other
      alternatives.

CAVEATS:
    - If I haven't got a test for it in tests.py, assume it doesn't work.
    - The code isn't threadsafe.  It will become so only if it must.

--Nick
