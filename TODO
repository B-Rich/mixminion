Legend:
SPEC!!	- Not specified
SPEC	- Spec not finalized
	- Not done
	* Top priority
	. Partially done
	o Done
	X Abandoned

NEEDS TO BE WRITTEN

FOR 0.0.1: (The first alpha)
	[Requirements: hackers can use this system to try sending messages
         around.  At least one delivery method works.  The code may be
         DOS'able, but must not have remote exploits.  Dirservers need not
         work.  There need not be an interface for replies.  Key rotation
         need not be automated.]

	. Server
		o Startup, config
		o Hardwired code to drop undeliverable messages
		o Document ServerMain
		o Unit test for keyset 
		o Make at least one delivery happen
			o BUG: Make sure hashlogs get written
			o BUG: "Unable to handle message with unknown type...
		o Use real cottrell mixing again.
		- More explicit overview of queues.
		- Need 'nuke keys' CLI.
		- Unit tests for various queues.
		o Better debugging logs
		- Test code to start 3 or 4 servers on one machine and
                  try sending some messages through.
	. CLI for server
		o Common CLI code.	
		o Run server
		. Generate future key
			o Keygen in server keyring
			o CLI
			*- Tests for CLI
	*- CLI client
		- Send a message
		- Generate a message
		- Linkage from command line to helper class
		o Design directory layout
		D Storage for serverinfo
			o Make serverinfo pickleable
				o Make RSA pickleable
			o Test
		- Test CLI client
	o Config
		o Infer nickname
		o Stub validation function for client
		o Stub validation function for server
		o Warn about unimplemented allow/deny
		o Warn about all unimplemented features
		o Make all config files reject bogus characters.
		o Example config
	. Build
		o Ability to pull ssl.
		o Ability to build ssl.
		o Good error message on missing zlib module
		- Use sane arguments when testing with multiple python versions
		- Marginal 'make install'
	- Integration testing
		- Better log messages at all points throughout system.
		. Fake delivery module for MBOX-less testing of core
			*- Tests for fake delivery module
		- Automated tests for several servers running on one machine.
		- Tests for servers on several different machines.
	. MBox module
		o Implement
		- Test
	. SMTP-Via-Mixmaster module
		o Implement
		- Document
		- Test
SPEC	o E2E functionality
		o Build singleton messages of all kinds, with compression
		o Decode singleton messages of all kinds
		o Generic decoder
		o ModuleManager changes
		o Testing
			o Test end-to-end build/decode
			o Test compression
			o Test helpers for failing cases
			o Test exact output formats on build*Message
			o Test failing cases for decode*Payload
			o Test decode*Payload on canned input
			o Test ModuleManager changes
	o Rename versions to 0.1.
	- Rename semantics:
	        - Rename 'tag' -> 'decoding handle'.  Make it a separate
		  field rather than a prefix of 'exitInfo'
		- Disable 'non-state-carrying' reply blocks.  Rename 'statful'
		  (non-state-carrying) and 'stateless' (state-carrying) to
		  something less contradictory
	o Change output of dates to avoid potential GMT confusion.
	o Change spec to reflect new date format
	o Marginally clean shutdown for server
	- Versioning :)
	- Final license
	- Documentation
		- Contributor's guide
		- Basic HOWTO
		- Difference between XXXX FFFF ????
		- Overall design
	- Separate package for server code.

Required for "1.0":
	 [These features must be in place before we can take the system out
          of alpha.  We'll do a series of point releases between 0.0.1 and
          the first beta.]

	- Key rotation and expiry
		- Automatic keygen as needed
		- Automatic key rotation
		- Password-protected private identity keys
		- Password-protected private link/packet keys
	- Security
		- Make createPrivateDirs gripe about group-writable parent
		  dirs
		- Make hashlog code use journaling if underlying dbs are 
		  unreliable.
	- Server core
		- Clean shutdown
		- Good reset handling
		- Drop undeliverable messages in a sane way
	- Modules and module support
		- MBOX
			- Use async or threading to cope with blocking MTAs
			- Full config validation
			- Full boilerplate
		- Move boilerplate into outside files.  Add a generic 
		  'Boilerplate' functionality.
		- Tell ModuleManager about async code
		- Support for forking delivery
		- SMTP module
		- Incoming email gateway
		- Refactor module manager to do decoding _before_ passing
		  payloads to the individual module implementations.
	- End-to-end issues
	        - K-of-N fragmentation and reassembly
		- Cap output size to prevent zlib bombing
	- Configurablity
	  	- Support for one-side-only MMTP configurations.
		- Make Mix algorithm configurable
		. Infer server IP
		- Freak out properly on missing/unpublishable IP.
		- Make listening configurable for multiple ports/ips, not
		  all of which need be published.  Perhaps allow different
		  rules for each listener.
		- Full validation function for client
		- Full validation function for server
		- Make 'push' and 'retry' delivery rates independant and
		  module-adjustable
		- Make 'drop undeliverable' rate configurable.
		- Implement allow/deny code
		- Make server gripe loudly when config doesn't match published
		  serverinfo.
	- Client support
		- Generate a reply block
		- Read message from reply block
		- Path selection
			- Understand differing server features
			- Watch out for servers that are really the
			  same server
		- Reply to reply block
		- Examine reply block
		- Send message to user with known key
		- Send message to user with known server
		- Real PKI
	- MMTP / async
		- Make listen options configurable (backlog, IP)
		- Code to send junk
SPEC!!		- Timeout old connections
		- Test new features
		- Renegotiate connections
		- Session managment and resumption (security issues?)
		- Tests for all cases:
			- Junk
			- Multiple senders
			- Bad senders
			- Bad recipients
			- Hunt down leaks
	- Build and install process
		- Get SSL as needed
		- Well-tested 'make install'
		- RPMS, debs, and so on
		- Make sure we run on solaris and *BSD.
		- "Somebody" should do a Windows port of the client code
	- Protocol support
		- External reply block format
		- End-to-end payload encryption, if we ever agree on a spec.
		- Reading messages sent to reply blocks
		- Correct implementation of stateless reply blocks
SPEC		o Patch to address George's 15August attack
	- Test on other (non-redhat, non-linux) systems
	- Directories
		- ServerInfo: complete validation rules
		- Implementation for directory servers
		- Publishing to directory servers
			- Support
			- Automation
		- Downloading from directory servers
			- Support
			- Automation
	- Full documentation
		- Complete docs for all code, with comments and examples.
		- Write guide for module developers
		- Write complete user's manual
		- Complete all other docs

Unspecified:
	[We don't have any specification for this functionality, or any
	 mandate to include it in 1.0.  If it's specified before 1.0 is
	 done, however, it should go in.]

	- Generate link padding
	- Generate dummy messages

WHEN WE GET THE CHANCE:
	[This stuff could be for any version 1.0 or later; it's not a
 	 requirement for 1.0.]
	- License-friendliness:
		- Switch from OpenSSL to NSS or GNUTLS
	- GUI
	- Multithreaded design to scale to multiple CPUs
	- Security
		- Memlockall wrapper
		- Generic secure delete
		- Support for loopback fs automation and shredding.
	- Portability
		- Server running on windows.
	- Time the rest of the system
	- Make DB module choice configurable?

NEED TO BE TESTED
- Signals

NEED TO BE DOCUMENTED

NEEDS TO BE BENCHMARKED
- TLS for leaks
- PEM for leaks
- gen_dh for leaks
- gen_cert for leaks

-----------
(for emacs)
  Local Variables:
  mode:text
  End:

