Legend:
SPEC!!	- Not specified
SPEC	- Spec not finalized
	- Not done
	* Top priority
	. Partially done
	o Done
	X Abandoned

NEEDS TO BE WRITTEN

FOR 0.0.1: (The first alpha)
	o Refactor brokenness
		o Configuration stuff should go into servermain/clientmain.
		   Forget this broken system of today.
		o Reset logic should also go into servermain/clientmain.
		o Document changes to Queue, MMTPServer
		o DeliveryQueue
			o Tests for Queue.*Object*
			o Implement
			o Change to be dumber about time.
			o Document
			o Test
		o MixQueue
			o Implement
			o Test
		o Document and refactor ModuleManager (it needs to know about
                  queues).
			o Document
			o Add queues
			o Test
		o Make Timing run again
		o Make slow stuff suck less.
		X "Enabled" should leave config
		o Key sets are their own class
		o Make individual queues into special classes.
		o A server is its own class, and has a better method breakdown
		o Clean out deleted stuff every so often
		o Document all changes; resolve XXXXs
	o Need hooks for undeliverable messages in MMTPServer.
	o Not even test should really use mktemp.
	. Module system
		o Stub classes
		o Modules are configurable
		o Modules are loadable
			o Implement
			o Test
		o Modules are self-describing
			o Implement
			o Test
		*. MBox module
			o Implement
			*- Test
	*. Server
		o Main loop for server
		*. Startup, config
		o Load keys
		o Receive messages
		o Process messages
		o Deliver MBOX messages.
		o Design directory layout
		- Automatic keygen as needed
		- Unit test for keyset and various queues.
		- Better debugging logs
		- Test code to start 3 or 4 servers on one machine and
                  try sending some messages through.

	- Add traceback-dumping functionality to Log class. 
	  (When did trceback.py get added to Python?)
	- Better log messages at all points throughout system.
	- Move boilerplate into outside files.  Add a generic 'Boilerplate'
	  functionality.
	- Test createPrivateDir
		- Normal cases
		- Failing cases
	- Support for one-side-only MMTP configurations.
	- Make Mix algorithm configurable
	*- CLI for server
		*- Run server
		*- Generate future key/publish to dirserver
	- CLI client
		- Send a message
		- Generate a message
		- Generate a reply block
		- Read message from reply block
		- Design directory layout
	- Config
		o Infer nickname
		- Infer IP
		- Validation function for client
		- Validation function for server		
		- Example config
	- Rename versions to 0.1.
	- Clean shutdown for server
	- MMTP	
		. Tests for all cases:
			- Junk
			- Multiple senders
			- Bad senders
			- Bad recipients
			- Hunt down leaks
			o Bad KeyID
	- External reply block format
	- End-to-end payload encryption, if we ever agree on a spec.
SPEC		- Reading messages sent to reply blocks
	- Versioning :)
	- make sure all FFFF and ???? and XXXX are on this list.

FOR 0.0.2: (The first hacker release)
	- Key rotation and expiry
	- MMTP
		- Code to send junk
SPEC!!		- Timeout old connections
		- Test new features
	- Very clean build process
		- Get SSL as needed
	- RPMS
	- Configurable mix rules.
	- Drop undeliverable messages
	- Key management
	- Test on other (non-redhat, non-linux) systems
	- Final license
	- Handle HUPs sensibly
SPEC!!	- Key rotation
	- Generate new keys as needed
	- Publishing to directory servers
	- Downloading from directory servers
	- Basic HOWTO and documentation

FOR 0.0.3: (First non-guru release)
	- MMTP
SPEC		- Renegotiate connections
SPEC		- Session managment and resumption (security issues?)
SPEC!!	- Path selection
SPEC!!	- SMTP module
	- Good user documentation
SPEC!!	- Link padding
SPEC!!	- Dummy messages
SPEC	- Directory services
SPEC	- Automated key rotation, server management

WHEN WE GET THE CHANCE:
	- NSS or GNUTLS or MyCrypt or M2Crypto? (for a GPL-compatible license)
	- GUI
	- Multithreaded design to scale to multiple CPUs
	- Password protection for private keys.
	- Memlockall wrapper
	- Generic secure delete
	- Works on windows, mac
	- Support for loopback fs automation and shredding.

NEED TO BE TESTED
- Signals

NEED TO BE DOCUMENTED
- Difference between XXXX FFFF ????
- Overall design

NEEDS TO BE BENCHMARKED
- TLS for leaks
- PEM for leaks
- gen_dh for leaks
- gen_cert for leaks
