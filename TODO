Legend:
SPEC!!  - Not specified
SPEC    - Spec not finalized
        - Not done
        * Top priority
        . Partially done
        o Done
        D Deferred
        X Abandoned

NEEDS TO BE WRITTEN

For 0.0.3:
        - Client
                - Add "don't use me for anonymity" boilerplate.
                - Client support for reply blocks.
                        - Recheck spec on external reply block format
                        - Implement and test external reply block format
                        - Generate a reply block
                        - Send message to reply block
                        - Remember used reply blocks??
                        - Read message from reply block
                        - Examine reply block
                - Read Base64-encoded messages and zbomb messages.
                - Faster (adjustable?) timeout on client connect failure.
                - Client-side pooling.
        . Multithreaded server for better network behavior (no 10ms
          hiccups when receiving; no pauses to shred files or deliver
          messages.)
                o Make all C functions use Py_BEGIN_ALLOW_THREADS and
                  Py_END_ALLOW_THREADS properly.
                o Make all commonly used Python code threadsafe.
                . Make Queues threadsafe.
                        o Design
                        o Implement
                        o Rename Queue.py to ServerQueue.py
                                o Do it
                                o Come up with install code to scrub
                                  old Queue.py where found.
                        o Come up with comments to explain why the
                          whole thing is threadsafe as used, and
                          explain what "as used" means.  Add asserts
                          to check "as used".
                        - Unit tests like mad.
                o Make shredding happen in a separate thread.
                o Make delivery happen in a separate thread.
                o Make packet processing happen in a separate thread. 
                o Move message decoding into packet handler thread.
                - Document
                o Refactor until sane -- possibly along with
                  DeliveryQueue refactoring.
                	o Refactor
                        o Change tests to test new interfaces
                        o Remove old interfaces
                        o Remove all users of addr in deliveryqueue
                        o Remove addr from deliveryqueue.
                        o Re-test all modules by hand.
                        o Unit tests for DeliveryPacket's more complex
                          methods.
                o Undaemonize threads; make them get shut
                  down explicitly so they can't die halfway.
                . Test like crazy
        . Signals
                o Cleaner shutdown on TERM.
                        o Implement
                        o Test
                . Good reset handling for HUP.
			o Don't die
                        o Reset logs
                        - Check configuration file for changeable
                          things.  (First, decide what's changeable on
                          the fly.)
        - Support maybe (for the alpha cycle only!) to get the mixminion
          version remotely ????
        - Directories include an "allowable version" section.
        . Saner retry logic: right now we retry once at each of the 10
          next Mix intervals, regardless of interval length.  (Have a 
          separate retry timer that gets rounded to the nearest mix
          event.)
                o Make 'retry' delivery rates independent and
                  module-adjustable.
                o Make 'drop undeliverable' rate configurable.
                o Make retry rates configurable.
                	o For modules
                        o For MMTP
                o Tests for _parseIntervalList
                o Test for new DeliveryQueue code
                o Validation code for retry intervals.
                - Test for module configuration
                - Test for actual retrying
                - Test for validation code
        - Statistics of some kind (with a server: count messages
          received, errors, etc.)
        - Separate error/other log files. ????
        - UI
                - Good user error reporting strategy.
                - Better error message when path+routinginfo won't fit 
                  into header.
                - Better concept of too-short paths.
                - Beautify list-servers output.
                o Make path parsing accept space around the commas and colon.
                o Make paths print more cleanly.
                o Better command breakdown for pulling directories.
        - Key management:
                . Ability to generate new serverdesc with old keys.
                - Ability to notice discrepancies between SD and
                  server configuration.
                - Consider linewrap protection on server descriptors, 
                  if demand warrants.
        - Build/install:
                . Uninstall support?
                o Perhaps 'make install' should nuke dead files. (Queue.py)
                - Support people who _do_ have OpenSSL 0.9.7 installed.
        - Security:
        	- Password-protect dirserver keys
                - Code to generate dummy packets. ????
        - Configurability
                - Put pid and lock and key and queues in different
                  places; coalesce pid and lock.
                - Make all filenames in server config relative to
                  server home, if not absolute.
        . MMTP
                o Code to send junk (connection padding)
                        o Implement for client
                        o Implement for nonblocking client
                        o Debug server
                        o Bump protocol version to 0.2
                        o Implement protocol negotiation. 
                        o Advertise protocols in server descriptor.
                        o Tests
                o Renegotiate connections
                        o Implement
                                o Renegotiate from blocking client
                                o Renegotiate from nonblocking
                        o Test
                o Don't check KEYID if KEYID=Z(20).  (The spec says
                  so, but I don't think this is a good idea.  We never
                  generate packets of this form now; this feature may
                  become deprecated with MMTP>0.2.)
                o Pick a logical value for listen backlog.
        o Core
        	o When generating a DROP packet, the payload should
                  be random, and there should be no tag.
                        o Implement
                        o Test
        - SMTP
                - Add an extra "this is anonymous" header.
        - COME UP WITH A REAL TESTING STRATEGY FOR PERFORMANCE AND
           CLI'S AND MULTI-SERVER SITUATIONS.
        - Tests for packet addressed to server with bogus IP.
        - ????

Required for "1.0":
         [These features must be in place before we can take the system out
          of alpha.  We'll do a series of point releases between 0.0.1 and
          the first beta.]

        - Better CLIs
                - Add another level of CLI commands. (E.g., mixminion server
                  keygen, etc.)
        - Key rotation and expiry
                - Document "DELKEYS"
                - Automatic keygen as needed
                - Automatic key rotation
                - Password-protected private identity keys
                - Password-protected private link/packet keys
        - Security
                - Make createPrivateDirs gripe about group-writable parent
                  dirs
        - Performance:
                X Directory servers should cache intermediate
                  information. [Pointless for now: my laptop can validate
                  1400 descriptors in 10 seconds.]
        - Modules and module support
                - MBOX
                        - Full config validation
                        - Full boilerplate text
                - Use ESMTP as available
                - Move boilerplate into outside files.  Add a generic
                  'Boilerplate' functionality.
                - Tell ModuleManager about async code (as soon as needed)
                - Real SMTP module
                        - Abuse prevention of some undetermined kind.
                        X Support for setting 'Subject' and 'From' lines.
                        - Support for setting 'Subject' line.  (Maybe 
                          content-type, too?)
                        - Support multiple exit addresses. (cc, bcc, etc.)
                          Needs to be bandwidth-limited.
                - Incoming email gateway
                - Some notion of 'client modules' would be a good idea.
                - Put 'address' someplace more reasonable.
        - End-to-end issues
                - K-of-N fragmentation and reassembly
                - Make zlib bomb prevention configurable.
        - Configurability
                - Better, documented support for http proxies for
                  downloading directories.
                - Support for one-side-only MMTP configurations.
                - Add 'ALLOW' lines to blacklist.
                . Freak out properly on missing/unpublishable IP.
                - Make listening configurable for multiple ports/ips, not
                  all of which need be published.  Perhaps allow different
                  rules for each listener. ???? Maybe not really a good idea.
                . Full validation function for client
                . Full validation function for server
                - Ability to disable directory paranoia.
        - Client support
                - Support to remove servers from imported set, or to block
                  servers from directory.
                o Check paths before reading from stdin.
                - Avoid timing distinguishability attack related to
                  check-dir, gen-path, read-from-stdin: only download
                  directory *AFTER* reading?  Strongly recommend a cron job?
                  Write the whole thing off as not-really-an-attack?
                - Path selection
                        - Watch out for servers that are really the
                          same server
                        - Only pick from the directory when picking
                          random servers.
                        - Notice Allow/Deny.
                        - Notice MMTP protocol versions.
                - Send message to user with known public key
                - Real PKI for end-to-end encryption
        - MMTP / async
                - "IP" belongs in the MMTP part of the server descriptor.
                - Timeout connections more aggressively under higher load.
                - Bandwidth throttling
                - Session management and resumption (security issues?)  Is this
                  really useful for performance?
                        - Server code to find out if clients have renegotiated.
                - Tests for all cases:
                        - Junk
                        - Retry on bogus close.
                        - Multiple senders
                        - Bad senders
                        - Bad recipients
                        - Hunt down leaks
        - Build and install process
                . Well-tested 'make install'
                - RPMS, debs, and so on
                . Make sure we run on solaris and *BSD.
                - "Somebody" should do a Windows port of the client code
                        - Build process
                        - Any C porting as necessary
                        - Signal code may need to change.
                        - Process mgt code may need to change.
                        - Some kind of substitute for /dev/urandom.
                        - Resolve as-yet-unsuspected platform dependencies
                - An init.d script.
        - Testing
                - Test on other (non-redhat, non-linux) systems
                - Tests for nickname casei.
                - Integration tests
                        - Automated tests for several servers running
                          on one machine.
                        - Tests for servers on several different
                          machines.
                - Repeatable CLI tests.
                        - For client
                        - For server
        - Directories
                - Publishing to directory servers
                        - Support
                        - Automation
                - Downloading from directory servers
                        - Support
                        - Automation
                - Autonomous directory server
                - Configurable dirserver fingerprints and URLs.
                - Support for full-blown multiple-server agreement mechanism
        - Full documentation
                - Complete docs for all code, with comments and examples.
                - Write guide for module developers
                - Write complete user's manual
                - Complete all other docs
                - History.
        - Cosmetic changes
                - Perhaps "SMTP" should be renamed to "MAIL".

Unspecified:
        [We don't have any specification for this functionality, or any
         mandate to include it in 1.0.  If it's specified before 1.0 is
         done, however, it should go in.]

        - Generate link padding
        - Generate dummy messages
        - IPv6 support.
        - Support for multiple directory servers
        - Bodies for dummy messages?  We should specify so that different
          peoples dummies are not different.
        - Notice active attacks and block IPs dynamically.

WHEN WE GET THE CHANCE:
        [This stuff could be for any version 1.0 or later; it's not a
         requirement for 1.0.]
        - License-friendliness:
                - Switch from OpenSSL to NSS or GNUTLS
        - GUI
        - Multithreaded design to scale to multiple CPUs
        - Security
                - Memlockall wrapper
                - Generic secure delete
                - Support for loopback fs automation and shredding.
        - Portability
                - Server running on windows.
        - Time the rest of the system
        - Make DB module choice configurable?
        - Consider dropping support for older Python versions?

NEED TO BE TESTED
- Signals

NEED TO BE DOCUMENTED

NEEDS TO BE BENCHMARKED
- TLS for leaks
- PEM for leaks
- gen_dh for leaks
- gen_cert for leaks

-----------
(for emacs)
  Local Variables:
  mode:text
  indent-tabs-mode:nil
  End:
