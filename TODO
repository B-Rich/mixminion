Legend:
SPEC!!  - Not specified
SPEC    - Spec not finalized
        - Not done
        * Top priority
        . Partially done
        o Done
        D Deferred
        X Abandoned

For a list of good beginner projects, check out HACKING.

NEEDS TO BE WRITTEN:

For 0.0.5:
        o Configurability:
                o Ability to disable or relax directory paranoia.
                o Trusted groups, trusted users for directory
                  permissions
                o Change maximum on Overlap.
        o Performance
                o Lazy-load deliverable messages.
                o Don't block while shredding messages at startup.
                o Shutdown faster on SIGTERM.
        o Security improvements
                o Include cfg info in descriptor
        o Initial support for email headers (server side)
                o Subject
                o From (limited)
                o In-Reply-To
                o References
                o MBOX support
                o Tests
        o Background projects:
                o Port to cygwin
                o Start win32 port
                        o Make it build.
                        o Make all unittests pass
                        o Make unittests pass without warnings
                        o Add a makeshift interactive mode.
                        o Real locking
                        o Real RNG via CryptGenRandom()
                o Twisted port decision
                o Website work
        o Refactor filestore logic out of ServerQueue
                o Refactor
                o Refactor deliveryqueue from is-a to has-a.
                o Refactor clientqueue
                o Rephrase tests to use new names.
                o Remove old 'Queue' class.
                o Tests for metadata methods
        o Refactor database logic out of SURBLog, HashLog
                o Implement common logic
                o Refactor existing classes
                o Tests for new logic
        o Change descriptors to accept YYYY-MM-DD.
                o Implement
                o Test
        o Initial support for email headers (client side)
                o Implement
                o Give error messages on bad headers
                o Test
        o UI improvements:
                o If we can't read serverdescs on startup, suggest a
                  server-DELKEYS.
                o Quiet server startup; should be by default if daemon
                  mode.
                o Ability to remove old messages from queue
                         o Implement
                         o Test
                o Generate random-length paths.
                o 'Iffy mode' messages are confusing.
                o Give a reasonable error when client is passed
                  server configuration.
                o Audit exceptions: which should be UIError?
        . Support for large messages and K-of-N in fwd messages
                o fec backend code
                o Tests and timing for fec backend
                o FRAGMENT routing type
                o Common fragment-pool code
                        o Implement
                        o Test fragmentation
                        o Test reassembly
                o Minimal fragment generation code for client
                o Fragment-pool logic for server
                o Advertise fragment reassembly in server descriptors
                o Check server descriptors when fragmenting
                - Tests
                        - Client-side fragmentation
                        - Server-side reassembly in pools
                        - Message-size maxima
                        - Cleaning out dead messages
                        - Fragmented cap in server descriptors
        . Bugfixes
                o Make AttemptedRelay ~~ SuccessfulRelay+FailedRelay.
                o Solve CPU infinite loop bug
                o Notice [...]s in test encoded messages
                o Handle corrupt pickled data
                - Handle server time moving backward
        - Installer and distribution
                - Include man page.
        - Release
                - Fix all XXXX005 and DOCDOC comments
                - Redact E2E-spec.txt
                - Update README
                - Manually test all new functionality
                - Manually test all old functionality
                - Test old servers with new client code
                - Test old clients with new servers

For 0.0.6:
        - Infrastructure -- low level
                - Generic 'encrypted storage' abstraction for
                  singleton pickled objects.
        - Infrastructure -- high level
                - Servers need to download and use directories
                - Refactor ClientMain to use a standard ClientAPI module.
                        - Port ClientAPI from C API document.
                - Rewrite ClientMain path generation to do the right
                  thing with multi-packet messages
        . UI improvements:
                - Notice when out of disk space, die more cleanly.
                  (support max-disk-usage).
                - Separate 'mixminiond' wrapper; 'mixminiond' confuses folk.
                - List servers by nickname, not by IP.
                - RFC822 interface and maildir-style exit module to help
                  integrators.
                - SSL's "Unexpected error: wrong version number"
                  message is confusing.
        - Dummies and pinging
        - Large reply messages and efwd messages
                - Relay non-FRAGMENT fragment messages
                - Send logic for client
                - Fragment-pool logic for client
        - Full windows client-side support
                - Address everything on Itamar's non-blocking
                  incompatibility list.
                - Installer
                - Instructions
        - Rudimentary MIME support (content-type, content-encoding only.)
        - Dynamic IP support
                - Change IPv4/IPv6 delivery methods to use DNS if desired.
                - Servers redirect to latest IP if old IP is down.  (Dynamic
                  IP support, after a fashion)
        - Make 'SIGHUP' reload, (and 'SIGUSR' dump).
                - SIGHUP should reconfigure everything:
                        - Logs
                        - EventStats
                        - securedelete
                        - EntropySource (discard old entropy)
                        - Configuration (as used by key)
                        - File locations (????)
                        - Network setup
                        - Module setup
                        - (What else?)
                - SIGHUP should check whether serverinfo should be
                  regenerated.
                - Add SIGUSR1 to do rotate-and-dump only.
        - Security improvements
                - Add ability to mark nodes as having same
                  administrative domain.
                - Add jurisdictions to pathgen?
                - Change pathgen to avoid two nodes with same domain
                  in a row.
                - Change pathgen to avoid using same node for entry
                  and exit?
        - Delayed Tests
                - Tests for online key rotation
                - Tests for ServerInbox and Directory.py
                - Tests for checkConsistency
                - What happens when Overlap > Lifetime?


Require for "0.1.0" (the in-theory-as-good-as-type-II release):
[Release criteria: Workable replacement for type II.  At least as
anonymous, usable, secure, and portable.  Nymservers aren't in, so
not yet ready to replace type I.]

        - Full statistics
                - Full statistics (ask Len what the list is.)
        - Key management
                - Document "DELKEYS"
                - Password-protected private identity keys
                - Password-protected private link/packet keys
                - Password-protected dirserver keys
        - Security
                - Make createPrivateDirs gripe about group-writable parent
                  dirs
        - Modules and module support
                - Use ESMTP as available
                - Move boilerplate into outside files.  Add some generic
                  'Boilerplate' functionality.
                - Real SMTP module
                        - Abuse prevention of some undetermined kind.
                        X Support for setting 'Subject' and 'From' lines.
                        - Support multiple exit addresses. (cc, bcc, etc.)
                          Needs to be bandwidth-limited.
        - End-to-end issues
                - K-of-N fragmentation and reassembly
                - MIME
        - Configurability
                - Better, documented support for http proxies for
                  downloading directories.
                - Make client-side pooling configurable and more
                  sophisticated.
                - Reload configuration on SIGHUP
                - Support for one-side-only MMTP configurations.
                . Freak out properly on missing/unpublishable IP.
                . Full validation function for client
                . Full validation function for server
                - No support for non-clique topologies
        - Client support
                - Automatically remove old messages from client queue.
                - Flush messages to a single mix.   
                - Support to remove servers from imported set, or to block
                  servers from directory.
                - Avoid timing distinguishability attack related to
                  check-dir, gen-path, read-from-stdin: only download
                  directory *AFTER* reading?  Strongly recommend a cron job?
                  Write the whole thing off as not-really-an-attack?
        - Build and install process
                o Well-tested 'make install'
                - A well-tested 'make uninstall'
                - RPMS, debs, and so on
                . Make sure we run on solaris and *BSD.
                - Make the software run under cygwin
                        - Handle weirdness with directory permissions
                        - flock
                        - Installing to relative path
                - "Somebody" should do a native Windows port
                        - Build process
                        o Any C porting as necessary
                        - Signal code may need to change.
                        - Process mgt code may need to change.
                        - Some kind of substitute for /dev/urandom.
                        - Resolve as-yet-unsuspected platform dependencies
                . An init.d script.
        - Testing
                - Test on other (non-redhat, non-linux) systems
                - COME UP WITH A REAL TESTING STRATEGY FOR PERFORMANCE AND
                  CLI'S AND MULTI-SERVER SITUATIONS.
                - Integration tests
                        - Automated tests for several servers running
                          on one machine.
                        - Tests for servers on several different
                          machines.
                - Repeatable CLI tests.
                        - For client
                        - For server
        - Support for multiple directories, no automated agreement.
                - Configurable dirserver fingerprints and URLs.
        - Full documentation
                - Complete docs for all code, with comments and examples.
                - Write guide for module developers
                - Write complete user's manual
                - Complete all other docs
                - History.
        - Dummy messages (as in batching-taxonomy)

        - DoS resistance strategy
                - Bandwidth throttling
                - Timeout connections more aggressively under heavy load
                - What else?
        - Disable heinously insecure operating modes.

Other features for "1.0" (no research required):
        - Better CLIs
                - Add a --status-fd option similar to GPG's so that
                  we can be more easily embedded.
        - Heavy-duty performance/DoS testing
        - Modules and module support
                - MBOX
                        - Full config validation
                        - Full boilerplate text
                - Tell ModuleManager about async code (as soon as needed)
        - Refactoring/cleanup
                - Put 'address' someplace more reasonable.
        - Configurability
                - Put pid and lock and key and queues in different
                  places; coalesce pid and lock.
                - Make all filenames in server config relative to
                  server home, if not absolute.
                - Make zlib bomb prevention configurable.
                - Separate error/other log files.
                - Make SURB logging configurable.
                - Add 'ALLOW' lines to blacklist.
        - Client support
                - Some way to read a reply block *and* a message from
                stdin?
        - Directory support
                - Servers should download directories
                - Servers should use downloaded directories to print useful
                  nicknames for other servers rather than just IP addresses.
        - Port to Twisted, if reasonable (see HACKING)
        - Send/receive large messages without having to suck them all
          into RAM at once.
        - MMTP / async
               - Make MMTP bursty
               - Tests for all cases:
                        - Packet to server with bogus IP
                        - Junk
                        - Retry on bogus close.
                        - Multiple senders
                        - Bad senders
                        - Bad recipients
                        - Hunt down leaks

Features for "1.0" (some research/specification required):
        - Nymservers
        - Modules and module support
                - Incoming email gateway
                        - Insert encoded packet into net.
                        - Reply to a reply block
        - Configurability
                - Make listening configurable for multiple ports/ips, not
                  all of which need be published.  Perhaps allow different
                  rules for each listener. ???? Maybe not really a good idea.
        - Client support: Improved path selection
                - Figure out how to deal with non-clique topologies
                - Watch out for servers that are really the
                  same server
                - Only pick from the directory when picking
                  random servers.
                - Notice Allow/Deny.
                - Notice MMTP protocol versions.
        - Fragment and unfragment large messages on disk.
        - Client support: other
                - Send message to user with known public key
                - Real PKI for end-to-end encryption
        - Directories
                - Support for full-blown multiple-server agreement mechanism
        - IPv6 support (must solve non-clique problem)
        - Generate link padding (if it helps)
        - Notice active attacks and block IPs dynamically.


WHEN WE GET THE CHANCE:
        [This stuff could be for any version 1.0 or later; it's not a
         requirement for 1.0.]
        - License-friendliness:
                - Switch from OpenSSL to NSS or GNUTLS
        - GUI
        . Multithreaded design to scale to multiple CPUs
        - Security
                - Memlockall wrapper
                o Generic secure delete
                - Support for loopback fs automation and shredding.
        - Make DB module choice configurable?
        - Consider dropping support for older Python versions?

NEED TO BE TESTED
- Signals

NEED TO BE DOCUMENTED

NEEDS TO BE BENCHMARKED
- TLS for leaks
- PEM for leaks
- gen_dh for leaks
- gen_cert for leaks

-----------
(for emacs)
  Local Variables:
  mode:text
  indent-tabs-mode:nil
  End:
