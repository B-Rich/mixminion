Legend:
	- Not done
	* For next checkin
	. Partially done
	o Done

NEEDS TO BE WRITTEN

FOR 0.1: (The rough edges release)
	o Make crypt.c read/write stuff in PEM?
		o (Private keys will be enough)
		* Test private key read/write in PEM.
	- Local delivery module
	- Manager process
	. Configuration code
		* Design config interface.
		. Write extended .ini parser
		. Write validation code
		- Write unit tests
		- Write base64/multiline code
		- Design =configuration= file format.
	*. Logging/debugging/warning code
		* Use consistently
		* Add minseverity
		* Suppress for testing
		* Make configurable
		- Test
		- Add reset support on sighup
		- Add close support at exit
	o Coding style guide
	- MMTP		
		*. Generate DH
			o C function
			* Py wrapper
			* Tests
			* Invoke as appropriate
		*. Generate X509/RSA as appropriate
			o C function
			* Py wrapper
			* Tests
			* Invoke as appropriate
		. Check Key IDs
		- Renegotiate connections
		- Timeouts
		- Tests for all cases:
			- Multiple senders
			- Bad senders
			- Bad recipients
			- Hanging connections
			- Hunt down leaks
	o More standard __init__.py
	- CLI
	- Server description blocks
	- Main loop for server
	- Clean shutdown for server
	o Reply block format
	- External reply block format
	- End-to-end payload encryption, if we ever agree on a spec.
		- Reading messages sent to reply blocks
	- Versioning :)

FOR 0.2: (The first hacker release)
	- MMTP
		- Session resumption (security issues?)
	- Very clean build process
	- RPMS
	- Key management
	- Test on other (non-redhat, non-linux) systems
	- Final license
	- Handle HUPs sensibly
	- Key rotation

FOR 0.3: (First non-guru release)
	- Publishing to directory servers
	- Downloading from directory servers
	- Path selection
	- SMTP module
	- Good user documentation
	- Directory services
	- Automated key rotation, server management

WHEN WE GET THE CHANCE:
	- NSS or GNUTLS or MyCrypt or M2Crypto? (for a GPL-compatible license)
	- GUI
	- Session persistence (?)
	- Multithreaded design to scale to multiple CPUs
	- Password protection for private keys.
	- Memlockall wrapper
	- Generic secure delete
	- Works on windows, mac

NEED TO BE TESTED
- Signals

NEED TO BE DOCUMENTED
- Difference between XXXX FFFF ????
- Overall design

NEEDS TO BE BENCHMARKED
- TLS for leaks
